# Build the go-app docker image
# Equivalent to: docker build -t devregistry:5000/simple-go-app -f ./code/Dockerfile ./code
# TODO: the image was (and should be) "ref='devregistry:5000/simple-go-app'". But for some reason 
# kubectl cannot pull it (run kubectl describe against the pod to see how the image is weirdly labeled)
docker_build(
    ref='devregistry:5000/simple-go-app',
    context='./go_app/src',
    dockerfile='./go_app/src/Dockerfile',
    only='./') # NOTE: 'only' is evaluated relative to the context parameter.

# TODO (goal): install postgres chart


# Allows running kubescape cluster security scanning manually, via the tilt ui.
# The point is simply to move security upstream, into the development loop.
# The scanner scans the cluster from the host, assuming k3d has setup kubeconfig as required by kubescan to scan by the command below.
# Security scanning is effectively just linting, and should be integrated into a build process as such.
# Allowing the developer to run the scan manually is just easier to maintain/describe for this project.
local_resource('cluster_security_scan', './scripts/run_cluster_security_scan.sh', trigger_mode=TRIGGER_MODE_MANUAL)


# Scans only the app chart static resources. This provides more relevant developer information because full cluster scanning 
# is somewhat TMI. Another way to do so would be to create an app/development namespace and scope scanning to it.
local_resource('app_chart_scan', './scripts/run_app_chart_scan.sh', trigger_mode=TRIGGER_MODE_MANUAL)


# Install the yaml generated by the helm command; first arg is pathToChartDir.
# This deploys to the default namespace (kludgy) for simplicity. In practice namespaces
# would be managed more methodically.
k8s_yaml(
    helm(
        './go_app/chart', 
        name='',
        namespace='default',
        values=['./go_app/chart/Values.yaml']
    )
)