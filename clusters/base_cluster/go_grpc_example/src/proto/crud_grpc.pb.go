// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: crud.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrudServiceClient is the client API for CrudService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrudServiceClient interface {
	// Create a Post
	CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostID, error)
	// Read a Post
	ReadPost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*empty.Empty, error)
	// Update a Post
	UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*empty.Empty, error)
	// Delete a Post
	DeletePost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*empty.Empty, error)
	// List Posts
	ListPosts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CrudService_ListPostsClient, error)
}

type crudServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrudServiceClient(cc grpc.ClientConnInterface) CrudServiceClient {
	return &crudServiceClient{cc}
}

func (c *crudServiceClient) CreatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*PostID, error) {
	out := new(PostID)
	err := c.cc.Invoke(ctx, "/crud.CrudService/CreatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) ReadPost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/crud.CrudService/ReadPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) UpdatePost(ctx context.Context, in *Post, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/crud.CrudService/UpdatePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) DeletePost(ctx context.Context, in *PostID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/crud.CrudService/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crudServiceClient) ListPosts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (CrudService_ListPostsClient, error) {
	stream, err := c.cc.NewStream(ctx, &CrudService_ServiceDesc.Streams[0], "/crud.CrudService/ListPosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &crudServiceListPostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrudService_ListPostsClient interface {
	Recv() (*Post, error)
	grpc.ClientStream
}

type crudServiceListPostsClient struct {
	grpc.ClientStream
}

func (x *crudServiceListPostsClient) Recv() (*Post, error) {
	m := new(Post)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CrudServiceServer is the server API for CrudService service.
// All implementations must embed UnimplementedCrudServiceServer
// for forward compatibility
type CrudServiceServer interface {
	// Create a Post
	CreatePost(context.Context, *Post) (*PostID, error)
	// Read a Post
	ReadPost(context.Context, *PostID) (*empty.Empty, error)
	// Update a Post
	UpdatePost(context.Context, *Post) (*empty.Empty, error)
	// Delete a Post
	DeletePost(context.Context, *PostID) (*empty.Empty, error)
	// List Posts
	ListPosts(*empty.Empty, CrudService_ListPostsServer) error
	mustEmbedUnimplementedCrudServiceServer()
}

// UnimplementedCrudServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCrudServiceServer struct {
}

func (UnimplementedCrudServiceServer) CreatePost(context.Context, *Post) (*PostID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedCrudServiceServer) ReadPost(context.Context, *PostID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPost not implemented")
}
func (UnimplementedCrudServiceServer) UpdatePost(context.Context, *Post) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedCrudServiceServer) DeletePost(context.Context, *PostID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedCrudServiceServer) ListPosts(*empty.Empty, CrudService_ListPostsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPosts not implemented")
}
func (UnimplementedCrudServiceServer) mustEmbedUnimplementedCrudServiceServer() {}

// UnsafeCrudServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrudServiceServer will
// result in compilation errors.
type UnsafeCrudServiceServer interface {
	mustEmbedUnimplementedCrudServiceServer()
}

func RegisterCrudServiceServer(s grpc.ServiceRegistrar, srv CrudServiceServer) {
	s.RegisterService(&CrudService_ServiceDesc, srv)
}

func _CrudService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/CreatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).CreatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_ReadPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).ReadPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/ReadPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).ReadPost(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Post)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/UpdatePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).UpdatePost(ctx, req.(*Post))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrudServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crud.CrudService/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrudServiceServer).DeletePost(ctx, req.(*PostID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrudService_ListPosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrudServiceServer).ListPosts(m, &crudServiceListPostsServer{stream})
}

type CrudService_ListPostsServer interface {
	Send(*Post) error
	grpc.ServerStream
}

type crudServiceListPostsServer struct {
	grpc.ServerStream
}

func (x *crudServiceListPostsServer) Send(m *Post) error {
	return x.ServerStream.SendMsg(m)
}

// CrudService_ServiceDesc is the grpc.ServiceDesc for CrudService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrudService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crud.CrudService",
	HandlerType: (*CrudServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _CrudService_CreatePost_Handler,
		},
		{
			MethodName: "ReadPost",
			Handler:    _CrudService_ReadPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _CrudService_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _CrudService_DeletePost_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPosts",
			Handler:       _CrudService_ListPosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "crud.proto",
}
