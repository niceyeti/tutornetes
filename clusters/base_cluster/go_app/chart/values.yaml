# Default values for a simple go web app.
# Note that this is very scratch/rough; the app definition below is just to serve
# as a starting point for a typical service, with no extras (volumes, security, etc).
# Importantly, the properties of the liveness/readiness and minReadySeconds parameters
# are just some default I used, and should be tuned conscientiously.

system: i-dont-know-i-just-work-here
version: 1

# TODO: cleanup and minimize the chart and values. This is very messy.

podAnnotations:
  some-annotation: dont-panic-be-happy

deployment:
  fullname: "simple-go-app"
  replicaCount: 1
  selectorLabels:
    app: simple-go-app
    enabled: "true"
  env:
    - name: "APP_PORT"
      value: "80"
  liveness:
    periodSeconds: 10
    initialDelaySeconds: 5
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1
  # Tolerance period to wait, after readiness succeeds, before forwarding traffic to deployed pods.
  # TODO: experiment with this parameter.
  minReadySeconds: 5

image:
  image: simple-go-app # TODO: consider renaming chart simple-go-app and using .Chart.name here; really, find out what others' convention is.
  repository: devregistry:5000 # TODO: need to resolve this; port map from outside the cluster is 3xxxx -> :5000 inside the cluster
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# Istio uses the service account name as a component of the service's security
# identity. Set "create" to false to use an previously created service account.
serviceAccount:
  name: go-app-acct
  create: true


# Configure the Istio ingress gateway to route outside traffic for the provided
# host name to this service on the ports and protocols defined in the 'ports' section 
# above. 
ingressGateway:
  name: go-app-gateway
  port: 8083
  portname: http
  protocol: http
  host: my.gateway.com
  matchPrefix:
    - "/fortune"
    - "/echo"
    - "/health"
    - "/app" # TODO: route to the static app page


# For Istio, the overall timeout for requests to this service.
# Required.
overallTimeout: 10s

# Client retry settings (use Istio syntax)
# Optional
retries:
  attempts: 3
  perTryTimeout: 2s

# Circuit breaker settings (use Istio syntax)
# Optional
outlierDetection: 
  consecutive5xxErrors: 5

# TODO: I have no plans on using one of these but would like to do so as an exercise,
# mounting a config-map as a volume and observing how quickly it updates.
configMap: # Optional
  # Where the config map should be mounted inside your container's filesystem.
  mountPath: /config/go-app-config
  fileName: config.yaml
  # Everything under content is copied verbatim into your service's configmap.
  content:
    key1: value1   # TBD: should these vals be quoted?
    key2: value2

service:
  name: go-app-svc
  type: "ClusterIP"
  port: "80"
  containerPort: 80 # TODO: make app read this from env
  containerPortName: "http"
  protocol: "TCP"
  readiness:
    periodSeconds: 10
    initialDelaySeconds: 5
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

#imagePullSecrets: []
#nameOverride: ""
#fullnameOverride: ""
#
#serviceAccount:
#  # Specifies whether a service account should be created
#  create: true
#  # Annotations to add to the service account
#  annotations: {}
#  # The name of the service account to use.
#  # If not set and create is true, a name is generated using the fullname template
#  name: ""

# TODO: implement security posture.
#podSecurityContext: {}
  # fsGroup: 2000

#securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000



# OBSOLETE. TODO: delete when istio succeeds.
#ingress:
#  annotations:
#    ingress.kubernetes.io/ssl-redirect: "false" # TODO: er what is this?
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
#  hosts:  # TODO: not used, hardcoded most ingress params in the template. Do some research on this field.
#    - host: chart-example.local
#      paths:
#        - path: /
#          pathType: ImplementationSpecific
#  tls: []
#    - secretName: chart-example-tls
#      hosts:
#        - chart-example.local

#resources: {}
#  # We usually recommend not to specify default resources and to leave this as a conscious
#  # choice for the user. This also increases chances charts run on environments with little
#  # resources, such as Minikube. If you do want to specify resources, uncomment the following
#  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#  # limits:
#  #   cpu: 100m
#  #   memory: 128Mi
#  # requests:
#  #   cpu: 100m
#  #   memory: 128Mi
#
#autoscaling:
#  enabled: false
#  minReplicas: 1
#  maxReplicas: 100
#  targetCPUUtilizationPercentage: 80
#  # targetMemoryUtilizationPercentage: 80
#
#nodeSelector: {}
#
#tolerations: []
#
#affinity: {}
